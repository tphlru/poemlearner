from base_exercise import BaseExercise

import re
import random
from typing import List

import streamlit as st


class SequenceExercise(BaseExercise):
	"""–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤"""
	def __init__(self, poems: List[str]):
		super().__init__()
		self.poems = poems
		self.selected_strophes = [0]
		self.sequence_words = []  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Å–ª–æ–≤–æ, –Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞)
		self.current_sequence = []  # –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		
	def prepare_task(self):
		"""–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏"""
		self.sequence_words = []
		
		for strophe_idx in self.selected_strophes:
			strophe = self.poems[strophe_idx]
			lines = [line.strip() for line in strophe.split('\n') if line.strip()]
			
			for i, line in enumerate(lines):
				words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', line)
				if words:
					word = random.choice(words)
					self.sequence_words.append((word, i, line))
					
		self.current_sequence = [w[0] for w in self.sequence_words]
		random.shuffle(self.current_sequence)

	def check_answer(self, user_sequence: List[str]) -> bool:
		"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
		correct_sequence = [w[0] for w in self.sequence_words]
		return user_sequence == correct_sequence

	def get_original_lines(self) -> List[str]:
		"""–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
		return [w[2] for w in self.sequence_words]
	
	def render(self):
		"""–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
		# –í—ã–±–æ—Ä —Å—Ç—Ä–æ—Ñ
		st.write("### –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ—Ñ—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:")
		all_strophes = range(len(self.poems))
		selected = st.multiselect(
			"–°—Ç—Ä–æ—Ñ—ã:",
			options=list(all_strophes),
			default=[0],
			format_func=lambda x: f"–°—Ç—Ä–æ—Ñ–∞ {x + 1}"
		)
		self.selected_strophes = selected if selected else [0]

		st.write("### –£—Ä–æ–≤–µ–Ω—å:", self.level)
		
		if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ") or not self.sequence_words:
			self.prepare_task()

		with st.form("sequence_form"):
			st.write("### –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:")
			user_sequence = []
			
			for i in range(len(self.current_sequence)):
				selected = st.selectbox(
					f"–ü–æ–∑–∏—Ü–∏—è {i + 1}:",
					options=self.current_sequence,
					key=f"seq_{i}"
				)
				user_sequence.append(selected)

			if st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç"):
				is_correct = self.check_answer(user_sequence)
				self.update_progress(is_correct)

				if is_correct:
					st.success("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä–Ω–æ.")
					if self.consecutive_correct == 3:
						st.success("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!")
						# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
						new_strophes = min(len(self.poems), len(self.selected_strophes) + 1)
						self.selected_strophes = list(range(new_strophes))
					self.prepare_task()
				else:
					st.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
					st.write("### –ò—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏:")
					for line in self.get_original_lines():
						st.write(line)
					st.write("### –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
					for i, (word, _, _) in enumerate(self.sequence_words, 1):
						st.write(f"{i}. {word}")
					st.warning(f"–û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {self.lives}")

		st.write("### –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
		activity_display = "".join(
			"<span style='color: green;'>üü©</span>" if status == "success" 
			else "<span style='color: red;'>üü•</span>"
			for status in self.activity_history
		)
		st.write(f"### –ñ–∏–∑–Ω–∏: {'‚ù§Ô∏è ' * self.lives}{'üñ§ ' * (2 - self.lives)}")
		st.markdown(activity_display, unsafe_allow_html=True)

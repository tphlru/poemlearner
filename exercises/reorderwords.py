from base_exercise import BaseExercise

import re
import random
from typing import List

import streamlit as st
from streamlit_sortables import sort_items


class ReorderWordsExercise(BaseExercise):
	"""–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–≤ —Å —É—Ä–æ–≤–Ω—è–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
	def __init__(self, poems: List[str]):
		super().__init__()
		self.poems = poems
		self.original_structure = []  # –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞
		self.shuffled_structure = []  # –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞
		self.current_strophe_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ—Ñ—ã
		self.strophes_completed = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ—Ñ –Ω–∞ —É—Ä–æ–≤–Ω–µ

	def prepare_task(self):
		"""–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
		self.original_structure = []
		self.shuffled_structure = []

		# –ï—Å–ª–∏ —Å—Ç—Ä–æ—Ñ—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
		if self.current_strophe_index >= len(self.poems):
			self.current_strophe_index = 0
			self.strophes_completed = 0
			self._level_up()  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å

		# –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ—Ñ—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
		if self.level_type < 4:
			strophe = self.poems[self.current_strophe_index]
			self.current_strophe_index += 1
		else:
			strophe = "\n".join(self.poems[:2])  # –î–ª—è —É—Ä–æ–≤–Ω—è 4+ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ—Ñ—ã

		if self.level_type == 1:
			# –£—Ä–æ–≤–µ–Ω—å 1: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—Ñ—ã
			lines = [line.strip() for line in strophe.split('\n') if line.strip()]
			for line in lines:
				words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', line)
				self.original_structure.append(words)
				shuffled_words = words[:]
				random.shuffle(shuffled_words)
				self.shuffled_structure.append(shuffled_words)

		elif self.level_type == 2:
			# –£—Ä–æ–≤–µ–Ω—å 2: –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤
			lines = [line.strip() for line in strophe.split('\n') if line.strip()]
			random.shuffle(lines)
			for line in lines:
				words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', line)
				self.original_structure.append(words)
				shuffled_words = words[:]
				random.shuffle(shuffled_words)
				self.shuffled_structure.append(shuffled_words)

		elif self.level_type == 3:
			# –£—Ä–æ–≤–µ–Ω—å 3: –≤—Å–µ —Å–ª–æ–≤–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ—Ñ—ã –≤ –æ–¥–Ω–æ–π –∫—É—á–µ
			words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', strophe)
			self.original_structure = words
			shuffled_words = words[:]
			random.shuffle(shuffled_words)
			self.shuffled_structure = shuffled_words

		elif self.level_type == 4:
			# –£—Ä–æ–≤–µ–Ω—å 4: —Å—Ç—Ä–æ–∫–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ—Ñ
			lines = [line.strip() for line in strophe.split('\n') if line.strip()]
			for line in lines:
				words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', line)
				self.original_structure.append(words)
				shuffled_words = words[:]
				random.shuffle(shuffled_words)
				self.shuffled_structure.append(shuffled_words)

		elif self.level_type == 5:
			# –£—Ä–æ–≤–µ–Ω—å 5: –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ—Ñ –≤ –æ–¥–Ω–æ–π –∫—É—á–µ
			words = re.findall(r'[–∞-—è–ê-–Ø—ë–Å]+', strophe)
			self.original_structure = words
			shuffled_words = words[:]
			random.shuffle(shuffled_words)
			self.shuffled_structure = shuffled_words

	def check_answer(self, user_reordered):
		"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ"""
		if self.level_type in [1, 2, 4]:
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
			for user_line, original_line in zip(user_reordered, self.original_structure):
				if user_line != original_line:
					return False
		elif self.level_type in [3, 5]:
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
			if user_reordered != self.original_structure:
				return False
		return True

	def _level_up(self):
		"""–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å"""
		self.level_up()
		self.level_type = min(5, self.level_type + 1)
		self.current_strophe_index = 0
		self.strophes_completed = 0
		print(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {self.level_type}")

	def render(self):
		"""–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω—è–º–∏"""
		st.write("### –£—Ä–æ–≤–µ–Ω—å:", self.level)

		if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ") or not self.shuffled_structure:
			self.prepare_task()

		user_reordered = []

		if self.level_type in [1, 2, 4]:
			# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
			for idx, shuffled_words in enumerate(self.shuffled_structure):
				st.write(f"–°—Ç—Ä–æ–∫–∞ {idx + 1}:")
				reordered = sort_items(shuffled_words)
				user_reordered.append(reordered)
		elif self.level_type in [3, 5]:
			# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
			st.write("–°–ª–æ–≤–∞:")
			user_reordered = sort_items(self.shuffled_structure)

		if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç"):
			is_correct = self.check_answer(user_reordered)
			self.update_progress(is_correct)

			if is_correct:
				st.success("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°—Ç—Ä–æ—Ñ–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
				self.strophes_completed += 1

				# –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ—Ñ—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
				if self.strophes_completed == len(self.poems) and self.level_type < 3:
					st.success("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ—Ñ—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.")
					self.level_up()
				elif self.strophes_completed >= 3 and self.level_type >= 3:
					st.success("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ 3 —Å—Ç—Ä–æ—Ñ—ã –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.")
					self.level_up()

				self.prepare_task()
			else:
				st.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
				if self.lives == 0:
					st.warning("–ñ–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –í—ã –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å.")
					self.level = max(1, self.level - 1)
					self.level_type = self.level
					self.lives = 2  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π
				st.warning(f"–û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {self.lives}")

		# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
		st.write("### –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
		activity_display = "".join(
			"<span style='color: green;'>üü©</span>" if status == "success" 
			else "<span style='color: red;'>üü•</span>"
			for status in self.activity_history
		)
		st.write(f"### –ñ–∏–∑–Ω–∏: {'‚ù§Ô∏è ' * self.lives}{'üñ§ ' * (2 - self.lives)}")
		st.markdown(activity_display, unsafe_allow_html=True)
